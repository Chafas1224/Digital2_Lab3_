
Lab3_Digital2_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000268  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b74  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000951  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005a4  00000000  00000000  00001875  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  00001e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cf  00000000  00000000  00001fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f5  00000000  00000000  0000248f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002684  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a0 00 	call	0x140	; 0x140 <main>
  88:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
volatile uint8_t pot1 = 0;
volatile uint8_t pot2 = 0;
volatile uint8_t canal_adc = 0;

void initADC(){
	ADMUX = 0;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	// REFERENCIA AVCC = 5V
	ADMUX |= (1 << REFS0);
  96:	80 81       	ld	r24, Z
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
  9c:	80 81       	ld	r24, Z
  9e:	8f 77       	andi	r24, 0x7F	; 127
  a0:	80 83       	st	Z, r24
	// JUSTIFICACION A LA IZQUIERDA
	ADMUX |= (1 << ADLAR);
  a2:	80 81       	ld	r24, Z
  a4:	80 62       	ori	r24, 0x20	; 32
  a6:	80 83       	st	Z, r24
	// PRESCALER 128
	ADCSRA = 0;
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  ae:	80 81       	ld	r24, Z
  b0:	87 60       	ori	r24, 0x07	; 7
  b2:	80 83       	st	Z, r24
	// HABILITAR INTERRUPCIÓN DE ADC
	ADCSRA |= (1 << ADIE);
  b4:	80 81       	ld	r24, Z
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	80 83       	st	Z, r24
	// HABILITAR ADC
	ADCSRA |= (1 << ADEN);
  ba:	80 81       	ld	r24, Z
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <iniciarADC>:
}

void iniciarADC(uint8_t canal){
	ADMUX = (ADMUX & 0xF8) | (canal & 0x07); // Seleccionar canal
  c2:	ec e7       	ldi	r30, 0x7C	; 124
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	90 81       	ld	r25, Z
  c8:	98 7f       	andi	r25, 0xF8	; 248
  ca:	87 70       	andi	r24, 0x07	; 7
  cc:	89 2b       	or	r24, r25
  ce:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);  // Iniciar conversión
  d0:	ea e7       	ldi	r30, 0x7A	; 122
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	80 83       	st	Z, r24
  da:	08 95       	ret

000000dc <__vector_21>:
}


ISR(ADC_vect){
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	2f 93       	push	r18
  e8:	3f 93       	push	r19
  ea:	4f 93       	push	r20
  ec:	5f 93       	push	r21
  ee:	6f 93       	push	r22
  f0:	7f 93       	push	r23
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
  f6:	af 93       	push	r26
  f8:	bf 93       	push	r27
  fa:	ef 93       	push	r30
  fc:	ff 93       	push	r31
	if (canal_adc == 0){
  fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 102:	81 11       	cpse	r24, r1
 104:	06 c0       	rjmp	.+12     	; 0x112 <__vector_21+0x36>
		pot1 = ADCH;  // Guardar el valor de ADC0
 106:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 10a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <pot1>
		canal_adc = 0;
 10e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		//ADCSRA |= (1 << ADIF);}
// 		} else {
// 		pot2 = ADCH;  // Guardar el valor de ADC1
// 		canal_adc = 0;
	}
	iniciarADC(canal_adc); // Iniciar la siguiente conversión automáticamente
 112:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 116:	0e 94 61 00 	call	0xc2	; 0xc2 <iniciarADC>
 11a:	ff 91       	pop	r31
 11c:	ef 91       	pop	r30
 11e:	bf 91       	pop	r27
 120:	af 91       	pop	r26
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	7f 91       	pop	r23
 128:	6f 91       	pop	r22
 12a:	5f 91       	pop	r21
 12c:	4f 91       	pop	r20
 12e:	3f 91       	pop	r19
 130:	2f 91       	pop	r18
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <mostrarEnLEDS>:
        }
    }
}

void mostrarEnLEDS(uint8_t valor) {
    PORTD = valor;  // Enviar el valor al puerto D
 13c:	8b b9       	out	0x0b, r24	; 11
 13e:	08 95       	ret

00000140 <main>:
void mostrarEnLEDS(uint8_t valor);

int main(void)
{
    uint8_t comando;
    spiInit(SPI_SLAVE);
 140:	80 e4       	ldi	r24, 0x40	; 64
 142:	0e 94 c3 00 	call	0x186	; 0x186 <spiInit>
    initADC();
 146:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
    iniciarADC(0);
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	0e 94 61 00 	call	0xc2	; 0xc2 <iniciarADC>

    // Habilitar Puerto D como salida
    DDRD = 0xFF;  // Configurar todos los pines del Puerto D como salida
 150:	8f ef       	ldi	r24, 0xFF	; 255
 152:	8a b9       	out	0x0a, r24	; 10
    PORTD = 0x00; // Inicializar LEDs apagados
 154:	1b b8       	out	0x0b, r1	; 11

    sei(); // Habilitar interrupciones globales
 156:	78 94       	sei

    while (1) 
    {
        comando = spiRead();  // Leer comando del maestro
 158:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <spiRead>

        if (comando == 1) {
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	29 f4       	brne	.+10     	; 0x16a <main+0x2a>
            spiWrite(pot1);
 160:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <pot1>
 164:	0e 94 db 00 	call	0x1b6	; 0x1b6 <spiWrite>
 168:	f7 cf       	rjmp	.-18     	; 0x158 <main+0x18>
        } 
        else if (comando == 2) {
 16a:	82 30       	cpi	r24, 0x02	; 2
 16c:	29 f4       	brne	.+10     	; 0x178 <main+0x38>
            spiWrite(pot2);
 16e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pot2>
 172:	0e 94 db 00 	call	0x1b6	; 0x1b6 <spiWrite>
 176:	f0 cf       	rjmp	.-32     	; 0x158 <main+0x18>
        } 
        else if (comando == 3) {
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	71 f7       	brne	.-36     	; 0x158 <main+0x18>
            uint8_t mensajeSPI = spiRead(); // Recibir un solo byte por SPI
 17c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <spiRead>
            mostrarEnLEDS(mensajeSPI);  // Mostrar el mensaje en los LEDs del Puerto D
 180:	0e 94 9e 00 	call	0x13c	; 0x13c <mostrarEnLEDS>
 184:	e9 cf       	rjmp	.-46     	; 0x158 <main+0x18>

00000186 <spiInit>:
#include "SPI.h"
#include <avr/io.h>

/* Inicializar SPI en modo Maestro o Esclavo */
void spiInit(Spi_Mode mode) {
	if (mode == SPI_MASTER) {
 186:	80 35       	cpi	r24, 0x50	; 80
 188:	49 f4       	brne	.+18     	; 0x19c <spiInit+0x16>
		/* Configurar pines para SPI Maestro */
		DDRB |= (1 << SPI_MOSI) | (1 << SPI_SCK) | (1 << SPI_SS);
 18a:	84 b1       	in	r24, 0x04	; 4
 18c:	8c 62       	ori	r24, 0x2C	; 44
 18e:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~(1 << SPI_MISO); // MISO como entrada
 190:	84 b1       	in	r24, 0x04	; 4
 192:	8f 7e       	andi	r24, 0xEF	; 239
 194:	84 b9       	out	0x04, r24	; 4

		/* Configurar registro SPCR */	
		SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1); // Habilita SPI en modo Maestro, divisor de reloj 16
 196:	82 e5       	ldi	r24, 0x52	; 82
 198:	8c bd       	out	0x2c, r24	; 44
 19a:	08 95       	ret
	}
	else {
		/* Configurar pines para SPI Esclavo */
		DDRB |= (1 << SPI_MISO); // MISO como salida
 19c:	84 b1       	in	r24, 0x04	; 4
 19e:	80 61       	ori	r24, 0x10	; 16
 1a0:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~(1 << SPI_MOSI) & ~(1 << SPI_SCK) & ~(1 << SPI_SS); // MOSI, SCK y SS como entradas
 1a2:	84 b1       	in	r24, 0x04	; 4
 1a4:	83 7d       	andi	r24, 0xD3	; 211
 1a6:	84 b9       	out	0x04, r24	; 4
		SPCR = 0;
 1a8:	1c bc       	out	0x2c, r1	; 44
		/* Configurar registro SPCR */
		SPCR = (1 << SPE); // Habilita SPI en modo Esclavo
 1aa:	80 e4       	ldi	r24, 0x40	; 64
 1ac:	8c bd       	out	0x2c, r24	; 44
		
		// Configurar MSB o LSB primero
		SPCR &= ~(1 << DORD);  // MSB Primero 
 1ae:	8c b5       	in	r24, 0x2c	; 44
 1b0:	8f 7d       	andi	r24, 0xDF	; 223
 1b2:	8c bd       	out	0x2c, r24	; 44
 1b4:	08 95       	ret

000001b6 <spiWrite>:
	}
}

/* Enviar un byte a través de SPI */
void spiWrite(uint8_t data) {
	SPDR = data; // Cargar dato en el buffer de transmisión
 1b6:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF))); // Esperar a que termine la transmisión
 1b8:	0d b4       	in	r0, 0x2d	; 45
 1ba:	07 fe       	sbrs	r0, 7
 1bc:	fd cf       	rjmp	.-6      	; 0x1b8 <spiWrite+0x2>
}
 1be:	08 95       	ret

000001c0 <spiRead>:

/* Leer un byte recibido en SPI */
uint8_t spiRead() {
	while (!(SPSR & (1 << SPIF))); // Esperar a que el dato esté disponible
 1c0:	0d b4       	in	r0, 0x2d	; 45
 1c2:	07 fe       	sbrs	r0, 7
 1c4:	fd cf       	rjmp	.-6      	; 0x1c0 <spiRead>
	return SPDR; // Retornar el dato recibido
 1c6:	8e b5       	in	r24, 0x2e	; 46
}
 1c8:	08 95       	ret

000001ca <__vector_18>:
char UART_readChar(void) {
	return rxBuffer; // Retornar el carácter recibido
}

// Interrupción de recepción UART
ISR(USART_RX_vect) {
 1ca:	1f 92       	push	r1
 1cc:	0f 92       	push	r0
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	0f 92       	push	r0
 1d2:	11 24       	eor	r1, r1
 1d4:	8f 93       	push	r24
	rxBuffer = UDR0; // Leer dato recibido
 1d6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1da:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <rxBuffer>
	rxFlag = 1; // Marcar dato como disponible
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <rxFlag>
}
 1e4:	8f 91       	pop	r24
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>
